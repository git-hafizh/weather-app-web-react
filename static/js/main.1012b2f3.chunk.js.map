{"version":3,"sources":["components/SearchCity/SearchCity.js","components/WindStatus/WindStatus.js","components/SunTime/SunTime.js","components/Humidity/Humidity.js","components/Visibilty/Visibility.js","components/AirPressure/AirPressure.js","components/WeatherForecast/WeatherForecast.js","components/MaxMin/MaxMin.js","components/WeatherLayout/WeatherLayout.js","App.js","serviceWorker.js","index.js"],"names":["SearchCity","state","city","onSubmit","e","preventDefault","alert","props","SearchingCity","setState","onChange","target","name","value","this","className","Row","Button","type","size","Input","placeholder","React","Component","WindStatus","Card","wind_speed","SunTime","sun_rise","sun_set","Humidity","id","humidity","Visibility","visibility","AirPressure","air_pressure","WeatherForecast","CardBody","day","icon","max","min","MaxMin","maxDis","minDis","WeatherLayout","a","weatherAPI","axios","get","then","result","cityID","data","woeid","cityName","title","catch","min_Temp","consolidated_weather","min_temp","max_Temp","max_temp","the_Temp","the_temp","wind_Speed","the_Visibility","the_AirPressure","the_Icon","weather_state_abbr","the_Date","time","_Datas","_Datas2","_Datas3","dateArr","moment","format","split","removeDateFromIndex","i","length","splice","_dateSliced","join","minTemp","toString","slice","maxTemp","theTemp","windSpeed","parseInt","parseFloat","theIcon","theDate","Datas","Datas2","Datas3","cityNumber","map","item","applicable_date","console","log","icoWeather","sunRise","sunSet","typeWeather","weather_state_name","theHumidity","convertVisibility","toFixed","theAirPressure","Container","Col","md","alt","src","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1012b2f3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FiSearch } from \"react-icons/fi\";\r\nimport { Input, Button, Row } from \"reactstrap\";\r\nimport \"./SearchCity.scss\";\r\n\r\nclass SearchCity extends React.Component {\r\n  state = {\r\n    city: \"\",\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.city === \"\") {\r\n      alert(\"City cannot be empty\");\r\n    } else {\r\n      this.props.SearchingCity(this.state.city);\r\n      this.setState({\r\n        city: \"\"\r\n      })\r\n    }\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} className=\"formCity\">\r\n        <Row>\r\n          <Button type=\"submit\">\r\n            <span>\r\n              <FiSearch size={20} />\r\n            </span>\r\n          </Button>\r\n          <Input\r\n            name=\"city\"\r\n            onChange={this.onChange}\r\n            value={this.state.city}\r\n            placeholder=\"Search for places...\"\r\n          />\r\n        </Row>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchCity;\r\n","import React from \"react\";\r\nimport { Card } from \"reactstrap\";\r\nimport \"./WindStatus.scss\";\r\n\r\nconst WindStatus = (props) => {\r\n  return (\r\n    <Card>\r\n      <span className=\"title\">Wind Status</span>\r\n      <br />\r\n      <span className=\"number\">\r\n        {props.wind_speed}\r\n        <span className=\"speed\"> km/h</span>\r\n      </span>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WindStatus;\r\n","import React from \"react\";\r\nimport { Card, Row } from \"reactstrap\";\r\nimport { FaArrowDown, FaArrowUp } from \"react-icons/fa\";\r\nimport \"./SunTime.scss\";\r\n\r\nconst SunTime = (props) => {\r\n  return (\r\n    <Card>\r\n      <span className=\"title\">Sunrise & Sunset</span>\r\n      <br />\r\n      <div className=\"square\">\r\n        <Row>\r\n          <div className=\"circle1\">\r\n            <FaArrowUp />\r\n          </div>\r\n          {props.sun_rise}\r\n        </Row>\r\n        <Row>\r\n          <div className=\"circle2\">\r\n            <FaArrowDown />\r\n          </div>\r\n          {props.sun_set}\r\n        </Row>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default SunTime;\r\n","import React from \"react\";\r\nimport { Card } from \"reactstrap\";\r\nimport \"./Humidity.scss\";\r\n\r\nconst Humidity = (props) => {\r\n  return (\r\n    <Card id=\"humidity\">\r\n      <span className=\"title\">Humidity</span>\r\n      <br />\r\n      <div className=\"wrapHumidity\">\r\n        <span className=\"number\">{props.humidity}</span>\r\n        <span className=\"percentage\">%</span>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Humidity;\r\n","import React from \"react\";\r\nimport { Card } from \"reactstrap\";\r\nimport \"./Visibility.scss\";\r\n\r\nconst Visibility = (props) => {\r\n  return (\r\n    <Card>\r\n      <span className=\"title\">Visibility</span>\r\n      <br />\r\n      <span className=\"number\">\r\n        {props.visibility}\r\n        <span className=\"km\"> km</span>\r\n      </span>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Visibility;\r\n","import React from \"react\";\r\nimport { Card } from \"reactstrap\";\r\nimport \"./AirPressure.scss\";\r\n\r\nconst AirPressure = (props) => {\r\n  return (\r\n    <Card>\r\n      <span className=\"title\">Air Pressure</span>\r\n      <br />\r\n      <span className=\"number\">\r\n        {props.air_pressure}\r\n        <span className=\"mbar\">mbar</span>\r\n      </span>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AirPressure;\r\n","import React from \"react\";\r\nimport { Card, CardBody } from \"reactstrap\";\r\nimport \"./WeatherForecast.scss\";\r\n\r\nconst WeatherForecast = (props) => {\r\n  return (\r\n    <Card className=\"top\">\r\n      <CardBody>\r\n        {props.day}\r\n        <br />\r\n        <span className=\"weather-icon\">{props.icon}</span>\r\n        <br />\r\n        <span className=\"temp-full\">\r\n          {props.max}\r\n          <span className=\"temp-degree\">&deg;C</span> - {props.min}\r\n          <span className=\"temp-degree\">&deg;C</span>\r\n        </span>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WeatherForecast;\r\n","import React from \"react\";\r\nimport { Card, Row } from \"reactstrap\";\r\nimport \"./MaxMin.scss\";\r\nimport { FaTemperatureHigh, FaTemperatureLow } from \"react-icons/fa\";\r\n\r\nconst MaxMin = (props) => {\r\n  return (\r\n    <Card>\r\n      <span className=\"title\">Max & Min Temperature</span>\r\n      <br />\r\n      <div className=\"squareTemp\">\r\n        <Row>\r\n          <div className=\"circleRed\">\r\n            <FaTemperatureHigh />\r\n          </div>\r\n          {props.maxDis}&deg;\r\n        </Row>\r\n        <Row>\r\n          <div className=\"circleBlue\">\r\n            <FaTemperatureLow />\r\n          </div>\r\n          {props.minDis}&deg;\r\n        </Row>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MaxMin;\r\n","import React from \"react\";\r\nimport { Container, Row, Col, Card } from \"reactstrap\";\r\nimport \"./WeatherLayout.scss\";\r\nimport axios from \"axios\";\r\nimport SearchCity from \"../SearchCity/SearchCity\";\r\nimport moment from \"moment\";\r\nimport WindStatus from \"../WindStatus/WindStatus\";\r\nimport SunTime from \"../SunTime/SunTime\";\r\nimport Humidity from \"../Humidity/Humidity\";\r\nimport Visibility from \"../Visibilty/Visibility\";\r\nimport AirPressure from \"../AirPressure/AirPressure\";\r\nimport WeatherForecast from \"../WeatherForecast/WeatherForecast\";\r\nimport MaxMin from \"../MaxMin/MaxMin\";\r\n\r\nclass WeatherLayout extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      city: null,\r\n      title: \"\",\r\n      cityNumber: null,\r\n      minTemp: 0,\r\n      maxTemp: 0,\r\n      theTemp: 0,\r\n      windSpeed: 0,\r\n      visibility: 0,\r\n      air_pressure: 0,\r\n      theDate: \"Monday, 0:00 AM\",\r\n      theIcon: \"\",\r\n      Datas: [],\r\n      Datas2: [],\r\n      Datas3: []\r\n    };\r\n  }\r\n\r\n  SearchingCity = async (city) => {\r\n    const weatherAPI =\r\n      \"https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api\";\r\n    await axios\r\n      .get(`${weatherAPI}/location/search/?query=${city}`)\r\n      .then((result) => {\r\n        let cityID = result.data[0].woeid;\r\n        let cityName = result.data[0].title;\r\n        this.setState({\r\n          city: cityID,\r\n          title: cityName,\r\n        });\r\n      })\r\n      .catch(() => alert(\"City is not listed\"));\r\n\r\n    let cityID = this.state.city;\r\n    await axios.get(`${weatherAPI}/location/${cityID}`).then((result) => {\r\n      const min_Temp = result.data.consolidated_weather[0].min_temp;\r\n      const max_Temp = result.data.consolidated_weather[0].max_temp;\r\n      const the_Temp = result.data.consolidated_weather[0].the_temp;\r\n      const wind_Speed = result.data.consolidated_weather[0].wind_speed;\r\n      const the_Visibility = result.data.consolidated_weather[0].visibility;\r\n      const the_AirPressure = result.data.consolidated_weather[0].air_pressure;\r\n      const the_Icon = result.data.consolidated_weather[0].weather_state_abbr;\r\n      const the_Date = result.data.time;\r\n\r\n      //Data 1\r\n      const _Datas = result.data.consolidated_weather[0];\r\n\r\n      //Data 2\r\n      const _Datas2 = result.data;\r\n\r\n      //Data 3\r\n      const _Datas3 = result.data.consolidated_weather;\r\n\r\n      //formatting date\r\n      const the_DateMoment = moment(the_Date).format(\"LLLL\");\r\n      const the_DateSlice = the_DateMoment.split(\" \");\r\n      let dateArr = the_DateSlice,\r\n        removeDateFromIndex = [1, 2, 3];\r\n\r\n      for (var i = removeDateFromIndex.length - 1; i >= 0; i--)\r\n        dateArr.splice(removeDateFromIndex[i], 1);\r\n\r\n      let _dateSliced = dateArr.join(\" \");\r\n      //\r\n\r\n      this.setState({\r\n        minTemp: min_Temp.toString().slice(0, 4),\r\n        maxTemp: max_Temp.toString().slice(0, 4),\r\n        theTemp: the_Temp.toString().slice(0, 4),\r\n        windSpeed: wind_Speed.toString().slice(0, 4),\r\n        visibility: parseInt(the_Visibility),\r\n        air_pressure: parseFloat(the_AirPressure),\r\n        theIcon: the_Icon,\r\n        theDate: _dateSliced,\r\n        Datas: _Datas,\r\n        Datas2: _Datas2,\r\n        Datas3: _Datas3\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      theTemp,\r\n      title,\r\n      theIcon,\r\n      theDate,\r\n      windSpeed,\r\n      visibility,\r\n      air_pressure,\r\n      Datas,\r\n      Datas2,\r\n      Datas3\r\n    } = this.state;\r\n\r\n    //weather forecast\r\n    const day = Datas3.map(item => {\r\n      return moment(item.applicable_date).format(\"dddd\");\r\n    });\r\n\r\n    const icon = Datas3.map(item => {\r\n      return item.weather_state_abbr;\r\n    })\r\n\r\n    console.log(icon)\r\n    \r\n    const min = Datas3.map(item => {\r\n      return parseInt(item.min_temp);\r\n    })\r\n    \r\n    const max = Datas3.map(item => {\r\n      return parseInt(item.max_temp);\r\n    })\r\n\r\n    //icon\r\n    const icoWeather = `https://www.metaweather.com/static/img/weather/${theIcon}.svg`;\r\n\r\n    //sun\r\n    const sunRise = moment(Datas2.sun_rise || 0).format(\"LT\");\r\n    const sunSet = moment(Datas2.sun_set || 0).format(\"LT\");\r\n\r\n    //weather name\r\n    const typeWeather = Datas.weather_state_name;\r\n\r\n    //humidity\r\n    const theHumidity = Datas.humidity || 0;\r\n\r\n    //visibilty convert miles to km\r\n    const convertVisibility = (visibility * 1.60934).toFixed(1);\r\n\r\n    //air pressure\r\n    const theAirPressure = air_pressure.toFixed(1);\r\n\r\n    //maxmin\r\n    const maxDis = parseInt(Datas.max_temp) || 0;\r\n    const minDis = parseInt(Datas.min_temp) || 0;\r\n\r\n    return (\r\n      <div className=\"main\">\r\n        <Container>\r\n          <Row>\r\n            <Col md={3} className=\"vert-1\">\r\n              <Card className=\"weather-search\">\r\n                <SearchCity\r\n                  city={this.state.city}\r\n                  SearchingCity={this.SearchingCity}\r\n                />\r\n              </Card>\r\n              <Card>\r\n                <span className=\"cityName\">{title}</span>\r\n                <span>\r\n                  <img alt=\"\" src={icoWeather} />\r\n                </span>\r\n                <span className=\"typeWeather\">{typeWeather}</span>\r\n              </Card>\r\n              <Card>\r\n                <div className=\"weather-temp\">\r\n                  {theTemp}\r\n                  <span className=\"temp-degree\">&deg;C</span>\r\n                </div>\r\n              </Card>\r\n              <Card>\r\n                <div className=\"weather-date\">{theDate}</div>\r\n              </Card>\r\n            </Col>\r\n            <Col md={9} className=\"vert-2\">\r\n              <div className=\"wrap\">\r\n                <div className=\"mapForecast\">\r\n                <WeatherForecast day={day[0]} icon={<img src={`https://www.metaweather.com/static/img/weather/${icon[0]}.svg`} alt=\"\"/>} min={min[0]} max={max[0]} />\r\n                <WeatherForecast day={day[1]} icon={<img src={`https://www.metaweather.com/static/img/weather/${icon[1]}.svg`} alt=\"\"/>} min={min[1]} max={max[1]} />\r\n                <WeatherForecast day={day[2]} icon={<img src={`https://www.metaweather.com/static/img/weather/${icon[2]}.svg`} alt=\"\"/>} min={min[2]} max={max[2]} />\r\n                <WeatherForecast day={day[3]} icon={<img src={`https://www.metaweather.com/static/img/weather/${icon[3]}.svg`} alt=\"\"/>} min={min[3]} max={max[3]} />\r\n                <WeatherForecast day={day[4]} icon={<img src={`https://www.metaweather.com/static/img/weather/${icon[4]}.svg`} alt=\"\"/>} min={min[4]} max={max[4]} />\r\n                <WeatherForecast day={day[5]} icon={<img src={`https://www.metaweather.com/static/img/weather/${icon[5]}.svg`} alt=\"\"/>} min={min[5]} max={max[5]} />\r\n                </div>\r\n                <Card className=\"bottom\">\r\n                  <span className=\"header-title\">Today's Highlight</span>\r\n                  <Row>\r\n                    <Col md={4}>\r\n                      <MaxMin maxDis={maxDis} minDis={minDis}/>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                      <WindStatus wind_speed={windSpeed} />\r\n                    </Col>\r\n                    <Col md={4}>\r\n                      <SunTime sun_rise={sunRise} sun_set={sunSet} />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md={4}>\r\n                      <Humidity humidity={theHumidity} />\r\n                    </Col>\r\n                    <Col md={4}>\r\n                      <Visibility visibility={convertVisibility} />\r\n                    </Col>\r\n                    <Col md={4}>\r\n                      <AirPressure air_pressure={theAirPressure} />\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherLayout;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport WeatherLayout from \"./components/WeatherLayout/WeatherLayout\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \n    }\n  }\n\n  render() {\n    return(\n      <div>\n        <WeatherLayout/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}